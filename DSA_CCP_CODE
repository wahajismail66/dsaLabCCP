import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;

public class Main extends Application {

    // Sample list of departments and students
    private static final String[] departments = {"Computer Science", "Mathematics", "Physics", "Biology"};
    private static final int totalStudents = 40;  // Total number of students in the classroom
    private static final int rows = 5;  // Number of rows in the classroom
    private static final int columns = 8;  // Number of columns in the classroom
    
    @Override
    public void start(Stage primaryStage) {
        // Create a GridPane to represent the seating arrangement
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);

        // List to hold all students in Round-Robin order
        List<String> students = generateStudents();

        // Fill the grid with the students' department names
        fillGridWithZigzagPattern(grid, students);

        // Set up the scene and stage
        Scene scene = new Scene(grid, 600, 400);
        primaryStage.setTitle("Student Seating Arrangement");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Generates the list of students from departments (Round-Robin Scheduling)
    private List<String> generateStudents() {
        List<String> students = new ArrayList<>();
        
        int studentCountPerDepartment = totalStudents / departments.length;
        int extraStudents = totalStudents % departments.length;
        
        // Round-Robin distribution of students
        for (int i = 0; i < departments.length; i++) {
            int studentsInDept = studentCountPerDepartment + (i < extraStudents ? 1 : 0);
            for (int j = 0; j < studentsInDept; j++) {
                students.add(departments[i]);
            }
        }
        
        return students;
    }

    // Fills the grid with the students' departments following the Zigzag Pattern
    private void fillGridWithZigzagPattern(GridPane grid, List<String> students) {
        int index = 0;

        for (int row = 0; row < rows; row++) {
            // For zigzag pattern, alternate the direction of filling each row
            if (row % 2 == 0) {
                // Fill from left to right
                for (int col = 0; col < columns; col++) {
                    if (index < students.size()) {
                        Text studentText = new Text(students.get(index));
                        grid.add(studentText, col, row);
                        index++;
                    }
                }
            } else {
                // Fill from right to left
                for (int col = columns - 1; col >= 0; col--) {
                    if (index < students.size()) {
                        Text studentText = new Text(students.get(index));
                        grid.add(studentText, col, row);
                        index++;
                    }
                }
            }
        }

        // Show an alert if there are more students than the grid can handle
        if (index < students.size()) {
            Alert alert = new Alert(AlertType.WARNING);
            alert.setTitle("Warning");
            alert.setHeaderText("Excess Students");
            alert.setContentText("There are more students than available seats in the grid.");
            alert.showAndWait();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}

